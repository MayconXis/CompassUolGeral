{
	"info": {
		"_postman_id": "575e2e08-d764-4de6-9f19-e1223d3e3378",
		"name": "ServeRest API-Testes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47360961",
		"_collection_link": "https://www.postman.com/mayconcontacts-3320949/workspace/petstore/collection/47360961-575e2e08-d764-4de6-9f19-e1223d3e3378?action=share&source=collection_link&creator=47360961"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "[POST] /login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se o status da resposta é 200 (OK)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Analisa o corpo da resposta em JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Verifica se a mensagem de sucesso está correta\r",
									"pm.test(\"Verifica a mensagem de sucesso\", () => {\r",
									"    pm.expect(responseData.message).to.eql(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Verifica se o token foi retornado e é uma string\r",
									"pm.test(\"Verifica se o token foi retornado\", () => {\r",
									"    pm.expect(responseData.authorization).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"// Define o token em uma variável de ambiente para usar em outras requisições\r",
									"pm.environment.set(\"token\", responseData.authorization);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"teste@gmail.com\",\r\n  \"password\": \"123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_url}}/login",
							"host": [
								"{{_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST]/login invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se o status da resposta é 401 (Unauthorized)\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Analisa o corpo da resposta em JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Verifica se a mensagem de erro está correta\r",
									"pm.test(\"Verifica a mensagem de erro\", () => {\r",
									"    pm.expect(responseData.message).to.eql(\"Email e/ou senha inválidos\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"testeInvalido@gmail.com\",\r\n  \"password\": \"123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_url}}/login",
							"host": [
								"{{_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "[GET] /usuarios",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_url}}/usuarios",
							"host": [
								"{{_url}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET]/usuarios/{_id}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/usuarios/{{_id}}",
							"host": [
								"{{_url}}"
							],
							"path": [
								"usuarios",
								"{{_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] /usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se o status da resposta é 201 (Created)\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Analisa o corpo da resposta em JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Verifica se a mensagem de sucesso está correta\r",
									"pm.test(\"Verifica a mensagem de sucesso\", () => {\r",
									"    pm.expect(responseData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Verifica se o ID do usuário foi retornado na resposta\r",
									"pm.test(\"Verifica se o ID do usuário foi retornado\", () => {\r",
									"    pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"// Define o ID do usuário em uma variável de ambiente para uso futuro\r",
									"pm.environment.set(\"userId\", responseData._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Maycon\",\r\n  \"email\": \"teste8gdg@gmail.com\",\r\n  \"password\": \"1238gd\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_url}}/usuarios",
							"host": [
								"{{_url}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST]/ usuarios invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se o status da resposta é 400 (Bad Request)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Analisa o corpo da resposta em JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Verifica se a mensagem de erro está correta\r",
									"pm.test(\"Verifica a mensagem de erro\", () => {\r",
									"    pm.expect(responseData.message).to.eql( \"Este email já está sendo usado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Maycon\",\r\n  \"email\": \"teste@gmail.com\",\r\n  \"password\": \"1238\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_url}}/usuarios",
							"host": [
								"{{_url}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST]/usuarios email existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se o status da resposta é 400 (Bad Request)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Analisa o corpo da resposta em JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Verifica se a mensagem de erro está correta\r",
									"pm.test(\"Verifica a mensagem de erro\", () => {\r",
									"    pm.expect(responseData.message).to.eql(\"Este email já está sendo usado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Maycon\",\r\n  \"email\": \"teste@gmail.com\",\r\n  \"password\": \"123\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_url}}/usuarios",
							"host": [
								"{{_url}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] /usuarios/{_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste de validação da resposta da exclusão\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica a mensagem de sucesso\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Registro excluído com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica a mensagem de que nenhum registro foi excluído\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Nenhum registro excluído\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/usuarios/{{_id}}",
							"host": [
								"{{_url}}"
							],
							"path": [
								"usuarios",
								"{{_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] /usuarios/{_id}",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Fulinha da Silva\", //mudando nome\r\n  \"email\": \"beltrano@atualizadoss.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_url}}/usuarios/{{_id}}",
							"host": [
								"{{_url}}"
							],
							"path": [
								"usuarios",
								"{{_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "[GET] /produtos",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/produtos",
							"host": [
								"{{_url}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET] /produtos/{_id}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/produtos/{{_id}}",
							"host": [
								"{{_url}}"
							],
							"path": [
								"produtos",
								"{{_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] /produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se o status da resposta é 201 (Created)\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Analisa o corpo da resposta em JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Verifica se a mensagem de sucesso está correta\r",
									"pm.test(\"Verifica a mensagem de sucesso\", () => {\r",
									"    pm.expect(responseData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Verifica se o ID do produto foi retornado na resposta\r",
									"pm.test(\"Verifica se o ID do produto foi retornado\", () => {\r",
									"    pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"// Define o ID do produto em uma variável de ambiente para uso futuro\r",
									"pm.environment.set(\"productId\", responseData._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"testes\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouses\",\r\n  \"quantidade\": 381\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_url}}/produtos",
							"host": [
								"{{_url}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST]/produtos sem token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se o status da resposta é 401 (Unauthorized)\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Analisa o corpo da resposta em JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Verifica se a mensagem de erro está correta\r",
									"pm.test(\"Verifica a mensagem de erro\", () => {\r",
									"    pm.expect(responseData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"teste\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_url}}/produtos",
							"host": [
								"{{_url}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET] /produtos/{_id}",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/produtos/{{_id}}",
							"host": [
								"{{_url}}"
							],
							"path": [
								"produtos",
								"{{_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] /produtos/{_id}",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/produtos/{{_id}}",
							"host": [
								"{{_url}}"
							],
							"path": [
								"produtos",
								"{{_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Carrinhos",
			"item": [
				{
					"name": "[GET] /carrinhos",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/carrinhos",
							"host": [
								"{{_url}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET] /carrinhos/{_id}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/carrinhos/{{_id}}",
							"host": [
								"{{_url}}"
							],
							"path": [
								"carrinhos",
								"{{_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] /carrinhos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/carrinhos",
							"host": [
								"{{_url}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] /carrinhos/concluir-compra",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/carrinhos/concluir-compra",
							"host": [
								"{{_url}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] /carrinhos/cancelar-compra",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_url}}/carrinhos/cancelar-compra",
							"host": [
								"{{_url}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "_url",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		}
	]
}